// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0
// 	protoc        v3.9.0
// source: event_center.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type EventPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Content []byte `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *EventPayload) Reset() {
	*x = EventPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_center_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventPayload) ProtoMessage() {}

func (x *EventPayload) ProtoReflect() protoreflect.Message {
	mi := &file_event_center_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventPayload.ProtoReflect.Descriptor instead.
func (*EventPayload) Descriptor() ([]byte, []int) {
	return file_event_center_proto_rawDescGZIP(), []int{0}
}

func (x *EventPayload) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *EventPayload) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type SubscriptInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType string `protobuf:"bytes,1,opt,name=eventType,proto3" json:"eventType,omitempty"`
	ClientID  string `protobuf:"bytes,2,opt,name=clientID,proto3" json:"clientID,omitempty"`
	Condition []byte `protobuf:"bytes,3,opt,name=condition,proto3" json:"condition,omitempty"`
}

func (x *SubscriptInfo) Reset() {
	*x = SubscriptInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_center_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptInfo) ProtoMessage() {}

func (x *SubscriptInfo) ProtoReflect() protoreflect.Message {
	mi := &file_event_center_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptInfo.ProtoReflect.Descriptor instead.
func (*SubscriptInfo) Descriptor() ([]byte, []int) {
	return file_event_center_proto_rawDescGZIP(), []int{1}
}

func (x *SubscriptInfo) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *SubscriptInfo) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *SubscriptInfo) GetCondition() []byte {
	if x != nil {
		return x.Condition
	}
	return nil
}

type SubscriptResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientID string `protobuf:"bytes,2,opt,name=clientID,proto3" json:"clientID,omitempty"`
	Token    string `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
	Success  bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error    string `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *SubscriptResult) Reset() {
	*x = SubscriptResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_center_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptResult) ProtoMessage() {}

func (x *SubscriptResult) ProtoReflect() protoreflect.Message {
	mi := &file_event_center_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptResult.ProtoReflect.Descriptor instead.
func (*SubscriptResult) Descriptor() ([]byte, []int) {
	return file_event_center_proto_rawDescGZIP(), []int{2}
}

func (x *SubscriptResult) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *SubscriptResult) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *SubscriptResult) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SubscriptResult) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

var File_event_center_proto protoreflect.FileDescriptor

var file_event_center_proto_rawDesc = []byte{
	0x0a, 0x12, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3c, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x22, 0x67, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x73, 0x0a, 0x0f, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x32, 0x71, 0x0a, 0x0b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12,
	0x2f, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x0e, 0x2e, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x10, 0x2e, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00,
	0x12, 0x31, 0x0a, 0x0b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x0d, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x0d,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x00, 0x28,
	0x01, 0x30, 0x01, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_event_center_proto_rawDescOnce sync.Once
	file_event_center_proto_rawDescData = file_event_center_proto_rawDesc
)

func file_event_center_proto_rawDescGZIP() []byte {
	file_event_center_proto_rawDescOnce.Do(func() {
		file_event_center_proto_rawDescData = protoimpl.X.CompressGZIP(file_event_center_proto_rawDescData)
	})
	return file_event_center_proto_rawDescData
}

var file_event_center_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_event_center_proto_goTypes = []interface{}{
	(*EventPayload)(nil),    // 0: EventPayload
	(*SubscriptInfo)(nil),   // 1: SubscriptInfo
	(*SubscriptResult)(nil), // 2: SubscriptResult
}
var file_event_center_proto_depIdxs = []int32{
	1, // 0: EventCenter.Subscript:input_type -> SubscriptInfo
	0, // 1: EventCenter.EventTunnel:input_type -> EventPayload
	2, // 2: EventCenter.Subscript:output_type -> SubscriptResult
	0, // 3: EventCenter.EventTunnel:output_type -> EventPayload
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_event_center_proto_init() }
func file_event_center_proto_init() {
	if File_event_center_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_event_center_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_center_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriptInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_center_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriptResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_event_center_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_event_center_proto_goTypes,
		DependencyIndexes: file_event_center_proto_depIdxs,
		MessageInfos:      file_event_center_proto_msgTypes,
	}.Build()
	File_event_center_proto = out.File
	file_event_center_proto_rawDesc = nil
	file_event_center_proto_goTypes = nil
	file_event_center_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// EventCenterClient is the client API for EventCenter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventCenterClient interface {
	Subscript(ctx context.Context, in *SubscriptInfo, opts ...grpc.CallOption) (*SubscriptResult, error)
	EventTunnel(ctx context.Context, opts ...grpc.CallOption) (EventCenter_EventTunnelClient, error)
}

type eventCenterClient struct {
	cc grpc.ClientConnInterface
}

func NewEventCenterClient(cc grpc.ClientConnInterface) EventCenterClient {
	return &eventCenterClient{cc}
}

func (c *eventCenterClient) Subscript(ctx context.Context, in *SubscriptInfo, opts ...grpc.CallOption) (*SubscriptResult, error) {
	out := new(SubscriptResult)
	err := c.cc.Invoke(ctx, "/EventCenter/Subscript", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventCenterClient) EventTunnel(ctx context.Context, opts ...grpc.CallOption) (EventCenter_EventTunnelClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EventCenter_serviceDesc.Streams[0], "/EventCenter/EventTunnel", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventCenterEventTunnelClient{stream}
	return x, nil
}

type EventCenter_EventTunnelClient interface {
	Send(*EventPayload) error
	Recv() (*EventPayload, error)
	grpc.ClientStream
}

type eventCenterEventTunnelClient struct {
	grpc.ClientStream
}

func (x *eventCenterEventTunnelClient) Send(m *EventPayload) error {
	return x.ClientStream.SendMsg(m)
}

func (x *eventCenterEventTunnelClient) Recv() (*EventPayload, error) {
	m := new(EventPayload)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventCenterServer is the server API for EventCenter service.
type EventCenterServer interface {
	Subscript(context.Context, *SubscriptInfo) (*SubscriptResult, error)
	EventTunnel(EventCenter_EventTunnelServer) error
}

// UnimplementedEventCenterServer can be embedded to have forward compatible implementations.
type UnimplementedEventCenterServer struct {
}

func (*UnimplementedEventCenterServer) Subscript(context.Context, *SubscriptInfo) (*SubscriptResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subscript not implemented")
}
func (*UnimplementedEventCenterServer) EventTunnel(EventCenter_EventTunnelServer) error {
	return status.Errorf(codes.Unimplemented, "method EventTunnel not implemented")
}

func RegisterEventCenterServer(s *grpc.Server, srv EventCenterServer) {
	s.RegisterService(&_EventCenter_serviceDesc, srv)
}

func _EventCenter_Subscript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriptInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventCenterServer).Subscript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EventCenter/Subscript",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventCenterServer).Subscript(ctx, req.(*SubscriptInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventCenter_EventTunnel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EventCenterServer).EventTunnel(&eventCenterEventTunnelServer{stream})
}

type EventCenter_EventTunnelServer interface {
	Send(*EventPayload) error
	Recv() (*EventPayload, error)
	grpc.ServerStream
}

type eventCenterEventTunnelServer struct {
	grpc.ServerStream
}

func (x *eventCenterEventTunnelServer) Send(m *EventPayload) error {
	return x.ServerStream.SendMsg(m)
}

func (x *eventCenterEventTunnelServer) Recv() (*EventPayload, error) {
	m := new(EventPayload)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _EventCenter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "EventCenter",
	HandlerType: (*EventCenterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Subscript",
			Handler:    _EventCenter_Subscript_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EventTunnel",
			Handler:       _EventCenter_EventTunnel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "event_center.proto",
}
